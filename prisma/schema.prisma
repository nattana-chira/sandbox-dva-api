generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String   
  profilePic     String?  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sentRequests   FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  
  hasFriends     UserFriends[] @relation("HasFriend")
  beFriends      UserFriends[] @relation("BeFriend")

  sentMessages       Message[] @relation("SentMessage")
  receivedMessages   Message[] @relation("ReceivedMessage")
}

model FriendRequest {
  id            Int      @id @default(autoincrement())
  senderId      Int
  receiverId    Int
  status        String   // 'pending', 'accepted', 'rejected'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sender        User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver      User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

model UserFriends {
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  user      User     @relation("HasFriend", fields: [userId], references: [id])
  friend    User     @relation("BeFriend", fields: [friendId], references: [id])

  @@id([userId, friendId])
}

model Message {
  id            Int      @id @default(autoincrement())
  senderId      Int
  receiverId    Int
  content       String   // The message content
  createdAt     DateTime @default(now())

  sender        User     @relation("SentMessage", fields: [senderId], references: [id])
  receiver      User     @relation("ReceivedMessage", fields: [receiverId], references: [id])
}